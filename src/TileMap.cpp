#include "TileMap.hpp"

#include <iostream>

TileMap::TileMap(sf::Texture &tileset) : tileset(tileset), mapPixelSize(0, 0) {}

void TileMap::loadLevel(const int level)
{
    switch (level)
    {
    case 1:
        levelWidth = 40;
        levelHeight = 25;
        levelTiles = level1;
        levelTilesCollision = levelc1;
        mapPixelSize.x = levelWidth * TILE_SIZE;
        mapPixelSize.y = levelHeight * TILE_SIZE;
        break;
    case 2:
        levelWidth = 15;
        levelHeight = 40;
        levelTiles = level2;
        levelTilesCollision = levelc2;
        mapPixelSize.x = levelWidth * TILE_SIZE;
        mapPixelSize.y = levelHeight * TILE_SIZE;
        break;
    default:
        break;
    }
    load();
}

void TileMap::load()
{
    vertices.clear();
    // on redimensionne le tableau de vertex pour qu'il puisse contenir tout le niveau
    vertices.setPrimitiveType(sf::Quads);
    vertices.resize(levelWidth * levelHeight * 4);

    // on remplit le tableau de vertex, avec un quad par tuile
    for (unsigned int i = 0; i < levelWidth; ++i)
        for (unsigned int j = 0; j < levelHeight; ++j)
        {
            // on récupère le numéro de tuile courant
            int tileNumber = levelTiles[i + j * levelWidth] - 1;
            if (tileNumber > 0)
            {

                // on en déduit sa position dans la texture du tileset
                int tu = tileNumber % (tileset.getSize().x / TILE_SIZE);
                int tv = tileNumber / (tileset.getSize().x / TILE_SIZE);

                // on récupère un pointeur vers le quad à définir dans le tableau de vertex
                sf::Vertex *quad = &vertices[(i + j * levelWidth) * 4];

                // on définit ses quatre coins
                quad[0].position = sf::Vector2f(i * TILE_SIZE, j * TILE_SIZE);
                quad[1].position = sf::Vector2f((i + 1) * TILE_SIZE, j * TILE_SIZE);
                quad[2].position = sf::Vector2f((i + 1) * TILE_SIZE, (j + 1) * TILE_SIZE);
                quad[3].position = sf::Vector2f(i * TILE_SIZE, (j + 1) * TILE_SIZE);

                // on définit ses quatre coordonnées de texture
                quad[0].texCoords = sf::Vector2f(tu * TILE_SIZE, tv * TILE_SIZE);
                quad[1].texCoords = sf::Vector2f((tu + 1) * TILE_SIZE, tv * TILE_SIZE);
                quad[2].texCoords = sf::Vector2f((tu + 1) * TILE_SIZE, (tv + 1) * TILE_SIZE);
                quad[3].texCoords = sf::Vector2f(tu * TILE_SIZE, (tv + 1) * TILE_SIZE);
            }
        }
}

void TileMap::draw(sf::RenderTarget &target, sf::RenderStates states) const
{
    // on applique la transformation
    states.transform *= getTransform();

    // on applique la texture du tileset
    states.texture = &tileset;

    // et on dessine enfin le tableau de vertex
    target.draw(vertices, states);
}

bool TileMap::computeCollision(const sf::FloatRect &bounds, sf::Vector2f &movement, int &trigger)
{
    int tileCrossedX = abs(movement.x / TILE_SIZE);
    int tileCrossedY = abs(movement.y / TILE_SIZE);
    int max;
    sf::Vector2f mvt, acc(0, 0), acc2;
    max = (tileCrossedX > tileCrossedY) ? tileCrossedX + 1 : tileCrossedY + 1;
    if (max > 1)
    {
        mvt.x = movement.x / (float)max;
        mvt.y = movement.y / (float)max;
        for (int i = 0; i < max; ++i)
        {
            acc.x += mvt.x;
            acc.y += mvt.y;
            acc2 = acc;
            if (collision(bounds, acc2, trigger))
            {
                movement.x = acc.x - mvt.x;
                movement.y = acc.y - mvt.y;
                return true;
            }
        }
        return false;
    }
    else
        return collision(bounds, movement, trigger);
}

bool TileMap::collision(const sf::FloatRect &bounds, sf::Vector2f &movement, int &trigger)
{
    bool col = false;

    float top = (bounds.top);
    float bot = (bounds.top + bounds.height);
    float left = (bounds.left);
    float right = (bounds.left + bounds.width);

    float nTop = (bounds.top + movement.y);
    float nBot = (bounds.top + bounds.height + movement.y);
    float nLeft = (bounds.left + movement.x);
    float nRight = (bounds.left + bounds.width + movement.x);

    int nLeftTopTile = (((unsigned int)nLeft / TILE_SIZE) + ((unsigned int)top / TILE_SIZE) * levelWidth);
    int nRightTopTile = (((unsigned int)nRight / TILE_SIZE) + ((unsigned int)top / TILE_SIZE) * levelWidth);
    int nLeftBotTile = (((unsigned int)nLeft / TILE_SIZE) + ((unsigned int)bot / TILE_SIZE) * levelWidth);
    int nRightBotTile = (((unsigned int)nRight / TILE_SIZE) + ((unsigned int)bot / TILE_SIZE) * levelWidth);

    int leftnTopTile = (((unsigned int)left / TILE_SIZE) + ((unsigned int)nTop / TILE_SIZE) * levelWidth);
    int rightnTopTile = (((unsigned int)right / TILE_SIZE) + ((unsigned int)nTop / TILE_SIZE) * levelWidth);
    int leftnBotTile = (((unsigned int)left / TILE_SIZE) + ((unsigned int)nBot / TILE_SIZE) * levelWidth);
    int rightnBotTile = (((unsigned int)right / TILE_SIZE) + ((unsigned int)nBot / TILE_SIZE) * levelWidth);

    int size = levelWidth * levelHeight;

    if (nRightBotTile > size || nRightTopTile > size || nLeftBotTile > size || nLeftTopTile > size)
    {
        movement.x = 0.f;
        col = true;
    }
    else if (movement.x > 0.f && (levelTilesCollision[nRightBotTile] != 0 || levelTilesCollision[nRightTopTile] != 0))
    {
        movement.x = 0.f;
        col = true;
        if (levelTilesCollision[nRightBotTile] < 0)
            trigger = levelTilesCollision[nRightBotTile];
    }
    else if (movement.x < 0.f && (levelTilesCollision[nLeftBotTile] != 0 || levelTilesCollision[nLeftTopTile] != 0))
    {
        movement.x = 0.f;
        col = true;
        if (levelTilesCollision[nLeftBotTile] < 0)
            trigger = levelTilesCollision[nLeftBotTile];
    }

    if ((leftnBotTile > size || rightnBotTile > size || leftnTopTile > size || rightnTopTile > size) ||
        (movement.y > 0.f && (levelTilesCollision[leftnBotTile] != 0 || levelTilesCollision[rightnBotTile] != 0)) ||
        (movement.y < 0.f && (levelTilesCollision[leftnTopTile] != 0 || levelTilesCollision[rightnTopTile] != 0)))
    {
        movement.y = 0.f;
        col = true;
    }
    return col;
}

const int TileMap::level1[] = {
    176, 358, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 361, 299,
    239, 422, 423, 424, 423, 424, 423, 424, 423, 424, 423, 424, 423, 424, 423, 424, 423, 424, 423, 424, 423, 424, 423, 424, 423, 424, 423, 424, 423, 424, 423, 424, 423, 424, 423, 424, 423, 424, 615, 616,
    176, 559, 560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 621, 679, 680,
    176, 367, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 530, 531, 532, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 742, 743, 744,
    176, 431, 432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 593, 594, 595, 596, 597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 806, 807, 808,
    176, 495, 496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 657, 658, 659, 660, 661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 869, 870, 871, 872,
    240, 559, 560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 721, 722, 723, 724, 725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 933, 934, 935, 936,
    176, 559, 560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 534, 535, 536, 537, 538, 0, 0, 0, 0, 0, 0, 0, 0, 0, 997, 998, 999, 1000,
    240, 367, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 598, 599, 600, 601, 602, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 621, 1063, 1064,
    239, 431, 432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 891, 57, 662, 663, 664, 665, 666, 57, 892, 0, 0, 0, 0, 0, 0, 0, 0, 621, 999, 1128,
    239, 495, 496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 955, 121, 113, 114, 113, 114, 114, 121, 956, 0, 0, 0, 0, 0, 0, 0, 0, 742, 743, 744,
    176, 367, 368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1019, 179, 180, 181, 182, 183, 184, 178, 1020, 0, 0, 0, 0, 0, 0, 0, 0, 806, 807, 808,
    239, 431, 432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 891, 51, 52, 892, 0, 0, 0, 0, 1083, 243, 244, 245, 246, 247, 248, 0, 1084, 0, 0, 0, 0, 0, 0, 0, 869, 870, 871, 872,
    176, 495, 496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 955, 115, 116, 956, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 933, 934, 935, 936,
    239, 495, 496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1019, 179, 180, 1020, 0, 0, 0, 530, 531, 532, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 997, 998, 999, 1000,
    239, 495, 496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1083, 243, 244, 1084, 0, 0, 593, 594, 595, 596, 597, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1063, 1064,
    239, 623, 0, 104, 105, 106, 0, 687, 688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 657, 658, 659, 660, 661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 999, 1128,
    239, 176, 171, 168, 169, 170, 171, 751, 752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 721, 722, 723, 724, 725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 3,
    239, 176, 239, 176, 239, 239, 107, 559, 560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 534, 535, 536, 537, 538, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 67,
    239, 240, 231, 232, 233, 234, 236, 623, 0, 0, 631, 632, 0, 0, 0, 0, 0, 0, 598, 599, 600, 601, 602, 0, 0, 0, 633, 634, 635, 636, 0, 0, 0, 0, 0, 0, 0, 0, 137, 131,
    239, 239, 295, 296, 297, 298, 103, 103, 0, 106, 695, 696, 104, 105, 106, 109, 110, 102, 662, 663, 664, 665, 666, 103, 102, 0, 697, 698, 699, 700, 109, 110, 102, 103, 104, 105, 106, 0, 201, 195,
    550, 239, 168, 169, 170, 166, 167, 167, 171, 170, 166, 167, 168, 169, 170, 173, 174, 166, 171, 172, 171, 172, 172, 171, 166, 172, 170, 166, 167, 168, 173, 174, 166, 167, 168, 169, 170, 172, 172, 172,
    175, 176, 175, 176, 176, 176, 175, 176, 176, 176, 176, 176, 176, 176, 175, 176, 176, 176, 175, 176, 176, 175, 176, 176, 176, 175, 176, 176, 176, 176, 176, 176, 175, 176, 176, 175, 175, 176, 176, 176,
    175, 175, 239, 175, 176, 240, 239, 240, 240, 240, 175, 176, 240, 240, 239, 240, 240, 175, 239, 240, 240, 175, 175, 176, 240, 239, 240, 175, 175, 175, 175, 176, 239, 240, 175, 239, 239, 240, 240, 240,
    239, 239, 239, 239, 240, 239, 239, 239, 239, 239, 239, 240, 239, 239, 239, 239, 239, 239, 240, 239, 239, 239, 239, 240, 239, 239, 239, 239, 239, 239, 239, 240, 239, 240, 239, 239, 240, 239, 239, 240

};

const int TileMap::levelc1[] = {
    176, 358, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 359, 360, 361, 299,
    239, 422, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 615, 616,
    176, 559, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 679, 680,
    176, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 743, 744,
    176, 431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 807, 808,
    176, 495, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 871, 872,
    240, 559, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 934, 935, 936,
    176, 559, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 999, 1000,
    240, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1063, 1064,
    239, 431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 999, 1128,
    239, 495, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 955, 121, 113, 114, 113, 114, 114, 121, 956, 0, 0, 0, 0, 0, 0, 0, 0, 0, 743, 744,
    176, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1019, 179, 180, 181, 182, 183, 184, 178, 1020, 0, 0, 0, 0, 0, 0, 0, 0, 0, 807, 808,
    239, 431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 871, 872,
    176, 495, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 955, 115, 116, 956, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 934, 935, 936,
    239, 495, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1019, 179, 180, 1020, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 999, 1000,
    239, 495, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1063, 1064,
    239, 623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 999, 1128,
    239, 176, 167, 168, 169, 170, 171, 751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
    239, 176, 239, 176, 239, 239, 107, 559, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
    239, 240, 231, 232, 233, 234, 236, 623, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
    239, 239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
    550, 239, 168, 169, 170, 166, 167, 167, 171, 170, 166, 167, 168, 169, 170, 173, 174, 166, 171, 172, 171, 172, 172, 171, 166, 172, 170, 166, 167, 168, 173, 174, 166, 167, 168, 169, 170, 172, 172, 172,
    175, 176, 175, 176, 176, 176, 175, 176, 176, 176, 176, 176, 176, 176, 175, 176, 176, 176, 175, 176, 176, 175, 176, 176, 176, 175, 176, 176, 176, 176, 176, 176, 175, 176, 176, 175, 175, 176, 176, 176,
    175, 175, 239, 175, 176, 240, 239, 240, 240, 240, 175, 176, 240, 240, 239, 240, 240, 175, 239, 240, 240, 175, 175, 176, 240, 239, 240, 175, 175, 175, 175, 176, 239, 240, 175, 239, 239, 240, 240, 240,
    239, 239, 239, 239, 240, 239, 239, 239, 239, 239, 239, 240, 239, 239, 239, 239, 239, 239, 240, 239, 239, 239, 239, 240, 239, 239, 239, 239, 239, 239, 239, 240, 239, 240, 239, 239, 240, 239, 239, 240

};

const int TileMap::level2[] = {
    1785, 1786, 1785, 1777, 1778, 1779, 1780, 1781, 1782, 1780, 1781, 1782, 1786, 1785, 1782,
    1849, 1850, 1849, 1970, 1971, 1972, 1973, 1974, 1911, 1912, 1972, 1973, 1850, 1849, 1970,
    1782, 1786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 2,
    2175, 2112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 66,
    2239, 2176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 130,
    2303, 2240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 194,
    2367, 2304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1785, 1780, 1781, 1777,
    2047, 2368, 1785, 1786, 1786, 1786, 1786, 0, 0, 0, 0, 2045, 2046, 2110, 2111,
    2111, 2432, 1849, 1850, 1850, 1850, 1850, 0, 0, 0, 0, 2109, 2110, 2174, 2175,
    2175, 2496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2173, 2174, 2110, 2111,
    2239, 2048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2237, 2238, 2174, 2175,
    2303, 2112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1969, 1970, 1971,
    2367, 2176, 0, 0, 0, 0, 0, 0, 1785, 1785, 1786, 0, 0, 1785, 1786,
    2047, 2240, 0, 0, 0, 0, 0, 0, 1849, 1849, 1850, 0, 0, 1849, 1850,
    2111, 2304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850,
    2175, 2368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1785, 1786,
    2239, 2432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850,
    2047, 2496, 0, 0, 0, 1785, 1785, 1786, 0, 0, 0, 0, 0, 1849, 1850,
    2111, 2048, 1785, 1785, 1785, 1849, 1785, 1786, 0, 0, 0, 0, 0, 1849, 1850,
    2175, 2112, 1849, 1849, 1849, 1849, 1849, 1850, 0, 0, 0, 0, 0, 1849, 1850,
    2239, 2176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850,
    2303, 2240, 0, 0, 0, 0, 0, 0, 0, 0, 1785, 1786, 0, 1849, 1850,
    2367, 2304, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850, 0, 1849, 1850,
    2175, 2368, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850, 0, 1849, 1850,
    2239, 2432, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850, 0, 1849, 1850,
    2303, 2048, 0, 0, 0, 0, 0, 0, 0, 1850, 1850, 1850, 0, 1849, 1850,
    2367, 2112, 0, 0, 0, 0, 0, 0, 0, 1849, 1849, 1850, 0, 1849, 1850,
    2047, 2176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850,
    2111, 2240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850,
    2175, 2304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850,
    2239, 2368, 0, 1784, 1785, 1786, 0, 0, 0, 0, 0, 0, 0, 1849, 1850,
    2303, 2432, 0, 0, 1849, 1850, 1784, 0, 0, 0, 0, 0, 0, 2045, 2047,
    2367, 2496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2109, 2111,
    3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 1785, 1786, 0, 2173, 2175,
    67, 74, 0, 0, 0, 0, 0, 0, 0, 0, 1785, 1786, 0, 2237, 2239,
    131, 138, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850, 0, 2301, 2303,
    195, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2365, 2367,
    1847, 1848, 1847, 1848, 1847, 1848, 1778, 1779, 1780, 1781, 1778, 1779, 1780, 1978, 2047,
    1842, 1843, 1844, 1845, 1842, 1842, 1843, 1844, 1842, 1843, 1844, 1845, 1842, 1843, 2111,
    1906, 1907, 1908, 1909, 1906, 1906, 1907, 1908, 1906, 1907, 1908, 1909, 1906, 1907, 2047};

const int TileMap::levelc2[] = {
    1785, 1786, 1785, 1777, 1778, 1779, 1780, 1781, 1782, 1780, 1781, 1782, 1786, 1785, 1782,
    1849, 1850, 1849, 1970, 1971, 1972, 1973, 1974, 1911, 1912, 1972, 1973, 1850, 1849, 1970,
    1782, 1786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 2,
    2175, 2112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 66,
    2239, 2176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 130,
    2303, 2240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 194,
    2367, 2304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1785, 1780, 1781, 1777,
    2047, 2368, 1785, 1786, 1786, 1786, 1786, 0, 0, 0, 0, 2045, 2046, 2110, 2111,
    2111, 2432, 1849, 1850, 1850, 1850, 1850, 0, 0, 0, 0, 2109, 2110, 2174, 2175,
    2175, 2496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2173, 2174, 2110, 2111,
    2239, 2048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2237, 2238, 2174, 2175,
    2303, 2112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1969, 1970, 1971,
    2367, 2176, 0, 0, 0, 0, 0, 0, 1785, 1785, 1786, 0, 0, 1785, 1786,
    2047, 2240, 0, 0, 0, 0, 0, 0, 1849, 1849, 1850, 0, 0, 1849, 1850,
    2111, 2304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850,
    2175, 2368, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1785, 1786,
    2239, 2432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850,
    2047, 2496, 0, 0, 0, 1785, 1785, 1786, 0, 0, 0, 0, 0, 1849, 1850,
    2111, 2048, 1785, 1785, 1785, 1849, 1785, 1786, 0, 0, 0, 0, 0, 1849, 1850,
    2175, 2112, 1849, 1849, 1849, 1849, 1849, 1850, 0, 0, 0, 0, 0, 1849, 1850,
    2239, 2176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850,
    2303, 2240, 0, 0, 0, 0, 0, 0, 0, 0, 1785, 1786, 0, 1849, 1850,
    2367, 2304, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850, 0, 1849, 1850,
    2175, 2368, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850, 0, 1849, 1850,
    2239, 2432, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850, 0, 1849, 1850,
    2303, 2048, 0, 0, 0, 0, 0, 0, 0, 1850, 1850, 1850, 0, 1849, 1850,
    2367, 2112, 0, 0, 0, 0, 0, 0, 0, 1849, 1849, 1850, 0, 1849, 1850,
    2047, 2176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850,
    2111, 2240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850,
    2175, 2304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850,
    2239, 2368, 0, 1784, 1785, 1786, 0, 0, 0, 0, 0, 0, 0, 1849, 1850,
    2303, 2432, 0, 0, 1849, 1850, 1784, 0, 0, 0, 0, 0, 0, 2045, 2047,
    2367, 2496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2109, 2111,
    3, 10, 0, 0, 0, 0, 0, 0, 0, 0, 1785, 1786, 0, 2173, 2175,
    67, 74, 0, 0, 0, 0, 0, 0, 0, 0, 1785, 1786, 0, 2237, 2239,
    131, 138, 0, 0, 0, 0, 0, 0, 0, 0, 1849, 1850, 0, 2301, 2303,
    195, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2365, 2367,
    1847, 1848, 1847, 1848, 1847, 1848, 1778, 1779, 1780, 1781, 1778, 1779, 1780, 1978, 2047,
    1842, 1843, 1844, 1845, 1842, 1842, 1843, 1844, 1842, 1843, 1844, 1845, 1842, 1843, 2111,
    1906, 1907, 1908, 1909, 1906, 1906, 1907, 1908, 1906, 1907, 1908, 1909, 1906, 1907, 2047};